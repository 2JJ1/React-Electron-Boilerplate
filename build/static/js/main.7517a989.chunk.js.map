{"version":3,"sources":["App.js","redux/reducers/index.js","serviceWorker.js","index.js"],"names":["App","handleMessage","event","message","console","log","global","ipcRenderer","on","this","removeListener","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","Component","Reducers","combineReducers","state","arguments","length","undefined","action","type","Object","assign","Boolean","window","location","hostname","match","reduxStore","createStore","reducer","ReactDOM","render","react_default","es","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kKAEMA,6MAiBLC,cAAgB,SAACC,EAAOC,GACvBC,QAAQC,IAAIF,uFAfZG,EAAOC,YAAYC,GAAG,UAAWC,KAAKR,8DAKtCK,EAAOC,YAAYG,eAAe,UAAWD,KAAKR,gDAIlD,OACAU,EAAAC,EAAAC,cAAA,gCAbgBC,aAsBHd,gKCbf,IAIee,EAJEC,YAAgB,CAC7BhB,IAVJ,WAAiC,IAApBiB,EAAoBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAZ,GAAIG,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC7B,OAAQC,EAAOC,MACX,IAAK,YACD,OAAOC,OAAOC,OAAO,GAAIP,EAAOI,EAAOA,QAC3C,QACI,OAAOJ,MCKCQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,IACMC,EAAaC,YAAYC,EADZ,IAGnBC,IAASC,OACLC,EAAAvB,EAAAC,cAACuB,EAAA,EAAD,CAAUC,MAAOP,GACbK,EAAAvB,EAAAC,cAACb,EAAA,EAAD,OAENsC,SAASC,eAAe,SDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7517a989.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass App extends Component {\r\n\tcomponentDidMount () {\r\n\t\t// start listening the channel message\r\n\t\tglobal.ipcRenderer.on('message', this.handleMessage)\r\n\t}\r\n\r\n\tcomponentWillUnmount () {\r\n\t\t// stop listening the channel message\r\n\t\tglobal.ipcRenderer.removeListener('message', this.handleMessage)\r\n\t}\r\n\r\n\trender () {\r\n\t\treturn (\r\n\t\t<p>Hello world!</p>\r\n\t\t)\r\n\t}\r\n\r\n\thandleMessage = (event, message) => {\r\n\t\tconsole.log(message)\r\n\t}\r\n}\r\n\r\nexport default App","import { combineReducers } from 'redux'\r\n\r\nfunction App(state = [], action) {\r\n    switch (action.type) {\r\n        case 'DO_ACTION':\r\n            return Object.assign({}, state, action.action)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst Reducers = combineReducers({\r\n    App\r\n})\r\n\r\nexport default Reducers","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { createStore } from 'redux'\r\nimport { Provider } from 'react-redux'\r\n\r\nimport App from './App';\r\nimport reducer from './redux/reducers'\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nvar initialState = {}\r\nconst reduxStore = createStore(reducer, initialState)\r\n\r\nReactDOM.render(\r\n    <Provider store={reduxStore}>\r\n        <App />\r\n    </Provider>\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}